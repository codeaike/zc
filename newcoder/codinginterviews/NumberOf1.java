package com.my.test.codinginterviews.bitoperation;

/**
 * 题目：
 * 二进制中1的个数 -- 剑指Offer 11
 * 
 * 题目描述：
 * 输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。
 * 
 */
public class NumberOf1
{
    /**
     * 原码：
     * 原码(true form)是一种计算机中对数字的二进制定点表示方法。
     * 原码表示法在数值前面增加了一位符号位（即最高位为符号位）：正数该位为0，负数该位为1
     * （0有两种表示：+0和-0），其余位表示数值的大小
     * 【例】
     * 十进制(7)，原码表示为 0 0000111
     * 十进制(-7)，原码表示为 1 0000111
     * 
     * 
     * 补码：
     * 1、正整数(符号位为0)的补码是其二进制表示，与原码相同
     * 2、负整数(符号位为1)的补码，将其原码除符号位外的所有位取反（0变1，1变0，符号位为1不变）后加1
     * 
     * 【例1】+9的补码是00001001 
     * 
     * 【例2】求-5的补码。
     * -5对应正数5（00000101）→所有位取反（11111010）→加1(11111011)
     * 所以-5的补码是11111011。
     * 
     * 【例3】数0的补码表示是唯一的。
     * [+0]补=[+0]反=[+0]原=00000000
     * [-0]补=11111111+1=00000000 
     * 
     * 
     * 反码：
     * 正数的反码与其原码相同；
     * 负数的反码是对正数逐位取反，符号位保持为1.
     * 
     * 【例】
     * [+7]反= 0 0000111
     * [-7]反= 1 1111000
     */
    
    /**
     * 思路：
     * 1、数字n逐位与1进行"与运算"
     * 2、如果为1，则说明此位上为1，count++
     */
    public int numberOf1(int n) {
        int count = 0;
        while (n != 0) {
            if ((n & 1) == 1) {
                count++;
            }
            // 注意此处要使用无符号右移，因为对于负数>>右移，高位补1，而无符号右移>>>，高位补0，适用此处场景
            n = n >>> 1;
        }
        return count;
    }

    /**
     * 思路：(摘自牛客网)
     * 如果一个整数不为0，那么这个整数至少有一位是1。如果我们把这个整数减1，
     * 那么原来处在整数最右边的1就会变为0，原来在1后面的所有的0都会变成1
     * (如果最右边的1后面还有0的话)。其余所有位将不会受到影响。
     * 
     * 举个例子：一个二进制数1100，从右边数起第三位是处于最右边的一个1。减去1后，第三位变成0，
     * 它后面的两位0变成了1，而前面的1保持不变，因此得到的结果是1011.
     * 我们发现减1的结果是把最右边的一个1开始的所有位都取反了。
     * 这个时候如果我们再把原来的整数和减去1之后的结果做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。
     * 如1100&1011=1000.也就是说，把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变成0.
     * 那么一个整数的二进制有多少个1，就可以进行多少次这样的操作。
     */
    public int numberOf1II(int n) {
        int count = 0;
        while (n != 0) {
            count++;
            n = n & (n-1);
        }
        return count;
    }
    
    public static void main(String[] args)
    {
        NumberOf1 inst = new NumberOf1();
        System.out.println(inst.numberOf1(7));
        System.out.println(inst.numberOf1II(7));
    }

}
